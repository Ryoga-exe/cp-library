{
    "Cell": {
        "prefix": "cppCell",
        "body": [
            "#define inner(x, y) (0 <= x && x < h && 0 <= y && y < w)",
            "constexpr int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 };",
            "constexpr int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };",
        ],
        "description": "Graph - Cell template",
        "scope": "cpp",
    },
    "WeightedGraph": {
        "prefix": "cppWeightedGraph",
        "body": [
            "struct Edge {",
            "    Edge(ll _to, ll _w) : to(_to), w(_w) {}",
            "    ll to;",
            "    ll w;",
            "};",
            "",
            "using WeightedGraph = vector<vector<Edge>>;"
        ],
        "description": "Graph - WeightedGraph",
        "scope": "cpp",
    },
    "dijkstra": {
        "prefix": "cppDijkstra",
        "body": [
            "void dijkstra(const WeightedGraph& g, const int s, vector<ll>& dist) {",
            "    const int n = g.size();",
            "    dist.assign(n, INF64);",
            "    priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> que;",
            "    dist[s] = 0;",
            "    que.emplace(dist[s], s);",
            "    while(!que.empty()) {",
            "        auto [p, v] = que.top();",
            "        que.pop();",
            "        if (dist[v] < p) continue;",
            "        for (auto& [to, w] : g[v]) {",
            "            if (chmin(dist[to], dist[v] + w)) {",
            "                que.emplace(dist[to], to);",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "void dijkstra(const WeightedGraph& g, const int s, vector<ll>& dist, vector<int>& prev) {",
            "    const int n = g.size();",
            "    dist.assign(n, INF64);",
            "    prev.assign(n, -1);",
            "    priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> que; ",
            "    dist[s] = 0;",
            "    que.emplace(dist[s], s);",
            "    while (!que.empty()) {",
            "        auto [p, v] = que.top();",
            "        que.pop();",
            "        if (dist[v] < p) continue;",
            "        for (auto& [to, w] : g[v]) {",
            "            if (chmin(dist[to], dist[v] + w)) {",
            "                prev[to] = v;",
            "                que.emplace(dist[to], to);",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "description": "Graph - dijkstra \n O(|E|log|V|)",
        "scope": "cpp",
    },
}
